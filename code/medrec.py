# -*- coding: utf-8 -*-
"""medrec.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-jbSLizW-0atZfg1lU583NNCvNVqsJpK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

!pip install -U scikit-learn scipy matplotlib

!pip install nltk

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Clone the repository containing the dataset
!git clone https://github.com/imharshitaa/ML-Model.git

# Assuming the dataset file is in CSV format, you can use pandas to load it
medicines = pd.read_csv("ML-Model/medicine.csv")

# Drop the 'Index' column
medicines.drop(columns=['index'], inplace=True)

# Replace NaN values with 0
medicines.fillna(0, inplace=True)

# Now you can work with the modified dataset
print(medicines.head())

medicines.head()

medicines.shape

medicines.isnull().sum()

medicines.dropna(inplace=True)

medicines.duplicated().sum()

medicines['Description']

medicines['Description'].apply(lambda x:x.split())

medicines['Description']

medicines['Description'].apply(lambda x:x.split())

medicines['Reason'] = medicines['Reason'].apply(lambda x:x.split())

medicines['Description'] = medicines['Description'].apply(lambda x:x.split())

medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])

medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])

medicines['tags'] = medicines['Description'] + medicines['Reason']

# Print column names
print(medicines.columns)

new_df = medicines[['Drug_Name','Reason','tags']]
new_df

new_df['tags'].apply(lambda x:" ".join(x))
new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))
new_df

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())
new_df

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(stop_words='english',max_features=5000)
def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)

cv.fit_transform(new_df['tags']).toarray().shape
vectors = cv.fit_transform(new_df['tags']).toarray()
feature_names = cv.get_feature_names_out()

# Now you can access the feature names
print(feature_names)

from sklearn.metrics.pairwise import cosine_similarity
cosine_similarity(vectors)
similarity = cosine_similarity(vectors)
similarity[1]

def recommend(medicine):
    medicine_index = new_df[new_df['Drug_Name'] == medicine].index[0]
    distances = similarity[medicine_index]
    medicines_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]

    for i in medicines_list:
        print(new_df.iloc[i[0]].Drug_Name)

print("--------------------------------")

recommend("Paracetamol 125mg Syrup 60mlParacetamol 500mg Tablet 10'S")


print("--------------------------------")
import pickle
pickle.dump(new_df.to_dict(),open('medicine_dict.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))

print("--------------------------------")

recommend("AMTERICIN 50mg Injection 50ml")

print("--------------------------------")

recommend("Baraclude 1mg Tablet 10'S")

print("--------------------------------")

recommend("Dolentia AQ Injection 1ml")

print("--------------------------------")

recommend("Dolo Cold Tablet 10'S")

print("--------------------------------")

recommend("Placentrex V Gel 20gm")

print("--------------------------------")

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pickle

# Load the data
medicines = pd.read_csv("ML-Model/medicine.csv")

# Drop unnecessary columns and handle missing values
medicines.drop(columns=['index'], inplace=True)
medicines.fillna(0, inplace=True)

# Combine the 'Description' and 'Reason' columns to create 'tags'
medicines['tags'] = medicines['Description'] + medicines['Reason']

# Convert 'tags' to lowercase and apply stemming
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
medicines['tags'] = medicines['tags'].apply(lambda x: ' '.join([ps.stem(word) for word in x.lower().split()]))

# Load the similarity matrix and medicine dictionary
similarity = pickle.load(open('similarity.pkl', 'rb'))
medicine_dict = pickle.load(open('medicine_dict.pkl', 'rb'))

def recommend_medicines(reason):
    # Stem and lowercase the reason
    stemmed_reason = ' '.join([ps.stem(word) for word in reason.lower().split()])

    # Find the index of the reason in the medicine dictionary
    reason_index = None
    for idx, tags in medicine_dict['tags'].items():
        if stemmed_reason in tags:
            reason_index = idx
            break

    # If the reason is found, recommend medicines based on similarity
    if reason_index is not None:
        distances = similarity[reason_index]
        medicines_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

        recommended_medicines = []
        for i in medicines_list:
            recommended_medicines.append(medicine_dict['Drug_Name'][i[0]])

        return recommended_medicines
    else:
        return "No medicines found for the given reason."

# Example usage
reason = "headache"
recommended_medicines = recommend_medicines(reason)
print("Recommended Medicines for", reason + ":")
for medicine in recommended_medicines:
    print(medicine)

# Display all unique reasons
unique_reasons = medicines['Reason'].unique()
print("List of reasons for medication recommendation:")
for i, reason in enumerate(unique_reasons, start=1):
    print(f"{i}. {reason}")

# Function to recommend medicines based on the chosen reason
def recommend_medicines_for_chosen_reason(chosen_reason):
    selected_reason = unique_reasons[chosen_reason - 1]
    recommended_medicines = recommend_medicines(selected_reason)
    print("\nRecommended Medicines for", selected_reason + ":")
    for medicine in recommended_medicines:
        print(medicine)

# Function to recommend medicines based on a given reason
def recommend_medicines_for_reason():
    reason = input("Enter the reason for medication recommendation: ")
    recommended_medicines = recommend_medicines(reason)
    print("\nRecommended Medicines for", reason + ":")
    for medicine in recommended_medicines:
        print(medicine)

# Call the function to recommend medicines based on user input
recommend_medicines_for_reason()

# Prompt the user to choose a reason
try:
    chosen_reason = int(input("\nEnter the number corresponding to the reason for medication recommendation: "))
    if 1 <= chosen_reason <= len(unique_reasons):
        recommend_medicines_for_chosen_reason(chosen_reason)
    else:
        print("Invalid input. Please enter a valid number.")
except ValueError:
    print("Invalid input. Please enter a valid number.")